
*** things in RLCSA used by GCSA ***



** meaty things **
encoder is something that has bits incrementally added to it
it is later converted to a vector

CSA::DeltaEncoder
CSA::DeltaVector
CSA::SuccinctEncoder
CSA::SuccinctVector
CSA::RLEEncoder
CSA::RLEVector
CSA::RLCSA
CSA::ReadBuffer
CSA::WriteBuffer
CSA::Alphabet

** simple utilities **
CSA::readRows
CSA::fileSize
CSA::largeWrite
CSA::length
CSA::memoryUsage
CSA::parallelSort
CSA::sequentialSort
CSA::removeDuplicates
CSA::readTimer

** simple types **
CSA::uchar
CSA::usint
CSA::sint
CSA::MEGABYTE
CSA::CHARS
CSA::EMPTY_PAIR
CSA::MILLION
CSA::pair_type


*** where different vectors are used and the methods invoked on them***

GCSA::array deltaVector for each character that exists in alphabet
array_iter.rank(range.first, true)
array_iter.select(index - this->alphabet->cumulative(c)
array_iter.selectNext()
array_iters[i]->isSet(lines - 1)


GCSA::outgoing rlevector
->getNumberOfItems()
->writeTo(output)
->reportSize()
->getSize()
outgoing_iter.select(index)
outgoing_iter.selectNext()
outgoing_iter.rank(edge_range.first)


GCSA::sampled_positions delta
sample_iter.isSet(index)
sample_iter.rank(temp)
sampled_positions->getNumberOfItems()
sampled_positions->writeTo(output)
sampled_positions->reportSize()

* there is a backbone attribute of Graph and also a Backbone class!

GCSA::backbone succinct

backbone->writeTo(base_name)
backbone->reportSize(print)
backbone->getNumberOfItems()
bb_iter->isSet(first - this->nodes)

backbone::original succinct
iter.isSet(index)
original->writeTo(output)
original->reportSize()

backbone::nodes succinct
his->nodes[this->edges[successors.first].rank].value() != this->nodes[current].value() + 1)
iter.isSet(index);
this->nodes[i].label

backbone::edges rle